// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentCredits.Infrastructure.Contexts.StudentCredits;

#nullable disable

namespace StudentCredits.Infrastructure.Contexts.StudentCredits.Migrations
{
    [DbContext(typeof(StudentCreditsContext))]
    [Migration("20250513051704_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentCredits.Domain.Entities.Details.StudentDetailEntity", b =>
                {
                    b.Property<Guid>("StudentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherDetailId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("StudentDetailId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherDetailId");

                    b.ToTable("StudentDetail", "dbo");

                    b.HasData(
                        new
                        {
                            StudentDetailId = new Guid("11ab0e13-3a0a-4fd7-9f80-3dc89b181efb"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 2, 1, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentId = new Guid("ee466b07-1d3e-4356-8d03-0067d5ba30e5"),
                            TeacherDetailId = new Guid("f87b9e01-7066-4a18-bbe5-560a9c6ddec2"),
                            Version = 0u
                        },
                        new
                        {
                            StudentDetailId = new Guid("2096ecba-29db-49d6-9646-a6c3e424953f"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 3, 2, 1, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentId = new Guid("ee466b07-1d3e-4356-8d03-0067d5ba30e5"),
                            TeacherDetailId = new Guid("f79f1e3c-8974-4b38-8f9d-72e738efb046"),
                            Version = 0u
                        },
                        new
                        {
                            StudentDetailId = new Guid("eab71419-9084-4e72-9558-ce4d76f0fd30"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 4, 3, 2, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentId = new Guid("107e7e52-74fc-4589-b7d9-5f1ffc434637"),
                            TeacherDetailId = new Guid("f87b9e01-7066-4a18-bbe5-560a9c6ddec2"),
                            Version = 0u
                        },
                        new
                        {
                            StudentDetailId = new Guid("90812e38-67ad-4207-8017-e2b09231231e"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 2, 1, 0, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentId = new Guid("107e7e52-74fc-4589-b7d9-5f1ffc434637"),
                            TeacherDetailId = new Guid("f79f1e3c-8974-4b38-8f9d-72e738efb046"),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.Details.TeacherDetailEntity", b =>
                {
                    b.Property<Guid>("TeacherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("Credits")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("TeacherDetailId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherDetail", "dbo");

                    b.HasData(
                        new
                        {
                            TeacherDetailId = new Guid("f87b9e01-7066-4a18-bbe5-560a9c6ddec2"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 2, 1, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("2ee9ebee-460c-4389-a50b-f0b602a2f617"),
                            TeacherId = new Guid("d3e5862d-3c30-4b35-8a0d-4632572aae47"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("f79f1e3c-8974-4b38-8f9d-72e738efb046"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 3, 2, 1, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("8a4b2308-49d0-44db-b2d5-675742d5f2fe"),
                            TeacherId = new Guid("d3e5862d-3c30-4b35-8a0d-4632572aae47"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("d6e0c50c-e994-4d6b-aca0-ebc09b411aa0"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 4, 3, 2, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("5a5f617c-4b9b-4974-9104-bd173b107172"),
                            TeacherId = new Guid("f41ed5f9-d853-4077-b6fe-9bb277bee93d"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("3b34bdd2-dc7c-41a1-bd79-dc8465aa2bf1"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 5, 4, 3, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("eb8e2deb-9f48-4376-b5d0-9e5f898d6586"),
                            TeacherId = new Guid("f41ed5f9-d853-4077-b6fe-9bb277bee93d"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("cf98b2d3-7d9b-4ce1-996a-ed25c706b644"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 6, 5, 4, 5, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("e9a4cce8-57b0-4693-bf22-cfec292bccc5"),
                            TeacherId = new Guid("08cd0782-93ba-4de3-b363-e7a4df2bfe7b"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("ccc8bb25-685f-404b-b53d-d446686f9cec"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 7, 6, 5, 6, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("e2fd4b74-7b10-446e-821e-55717899c400"),
                            TeacherId = new Guid("08cd0782-93ba-4de3-b363-e7a4df2bfe7b"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("4f098579-1bd2-4e7c-822a-9160871450de"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 8, 7, 6, 7, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("4b2d9626-0259-42a5-a98c-11019b4cf873"),
                            TeacherId = new Guid("42318f73-c7fd-4490-9594-7c72a77bbee7"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("a5794476-1317-4ebc-86b3-e9640b20a1a8"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 9, 8, 7, 8, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("fc560c08-aa92-44c6-9ae1-101987824877"),
                            TeacherId = new Guid("42318f73-c7fd-4490-9594-7c72a77bbee7"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("7240162d-4f52-425d-a4f6-54b4127e8828"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 10, 9, 8, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("9748e5ff-07ba-4cb8-8617-53a785fc2ebf"),
                            TeacherId = new Guid("c774f591-750a-47f9-b283-327cdb62f627"),
                            Version = 0u
                        },
                        new
                        {
                            TeacherDetailId = new Guid("10ed0335-ece3-4e80-9c01-28e1f1f3fe67"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 11, 11, 10, 10, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Credits = 3.0m,
                            SubjectId = new Guid("a3e42c74-8a68-4e2d-b339-caa2e89db0a7"),
                            TeacherId = new Guid("c774f591-750a-47f9-b283-327cdb62f627"),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.StudentEntity", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("StudentId");

                    b.HasIndex("DocumentNumber", "Email")
                        .IsUnique();

                    b.ToTable("Student", "dbo");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("ee466b07-1d3e-4356-8d03-0067d5ba30e5"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 1, 0, 1, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1033671288",
                            Email = "angela.suarez@outlook.com",
                            Firstname = "Angela Natalia",
                            Lastname = "Suarez",
                            Version = 0u
                        },
                        new
                        {
                            StudentId = new Guid("107e7e52-74fc-4589-b7d9-5f1ffc434637"),
                            Created = new DateTimeOffset(new DateTime(2024, 3, 3, 2, 2, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1109432112",
                            Email = "jeison.bonilla@gmail.com",
                            Firstname = "Jeison Andrés",
                            Lastname = "Bonilla",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.SubjectEntity", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("SubjectId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subject", "dbo");

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("2ee9ebee-460c-4389-a50b-f0b602a2f617"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 11, 1, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn to identify system problems with a general, reusable, scalable and applicable solution",
                            Name = "Design Patterns",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("8a4b2308-49d0-44db-b2d5-675742d5f2fe"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 15, 2, 1, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn how to apply a set of rules and best practices for software development",
                            Name = "S.O.L.I.D Principles",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("5a5f617c-4b9b-4974-9104-bd173b107172"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 16, 3, 2, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn how clean architectures work to separate concerns into different, well-defined layers, with strict rules about how they should interact with each other",
                            Name = "Clean Architecture",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("eb8e2deb-9f48-4376-b5d0-9e5f898d6586"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 17, 4, 3, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn how to implement a design methodology for rapid deployment and updating of cloud-based applications",
                            Name = "Microservices Architecture",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("e9a4cce8-57b0-4693-bf22-cfec292bccc5"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 18, 5, 4, 5, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn why QA Automation is so important in the software development cycle",
                            Name = "QA Automation Fundamentals",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("e2fd4b74-7b10-446e-821e-55717899c400"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 19, 6, 5, 6, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn about the most popular tools for QA Automation, features and benefits",
                            Name = "QA Automation Tools",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("4b2d9626-0259-42a5-a98c-11019b4cf873"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 20, 7, 6, 7, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Discover how a Scrum Master can lead a team and keep members focused on the principles of the framework",
                            Name = "Scrum Master Fundamentals",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("fc560c08-aa92-44c6-9ae1-101987824877"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 21, 8, 7, 8, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Discover how a Scrum Master should expertly plan to maintain a fully agile team",
                            Name = "Planning a scrum master",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("9748e5ff-07ba-4cb8-8617-53a785fc2ebf"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 22, 9, 8, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn how to become an expert with TypeScript the JavaScript superset for strict typing",
                            Name = "Development With TypeScript",
                            Version = 0u
                        },
                        new
                        {
                            SubjectId = new Guid("a3e42c74-8a68-4e2d-b339-caa2e89db0a7"),
                            Created = new DateTimeOffset(new DateTime(2024, 1, 23, 10, 9, 10, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Learn how to develop with one of the most popular and powerful frameworks, create robust applications",
                            Name = "Angular Fundamentals",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.TeacherEntity", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("TeacherId");

                    b.HasIndex("DocumentNumber", "Email")
                        .IsUnique();

                    b.ToTable("Teacher", "dbo");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("d3e5862d-3c30-4b35-8a0d-4632572aae47"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 1, 0, 1, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1023944678",
                            Email = "cristian10camilo95@gmail.com",
                            Firstname = "Cristian Camilo",
                            Lastname = "Bonilla",
                            Profession = "Senior Software Developer",
                            Version = 0u
                        },
                        new
                        {
                            TeacherId = new Guid("f41ed5f9-d853-4077-b6fe-9bb277bee93d"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 2, 1, 2, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1090012334",
                            Email = "fernando.gutierrez@gmail.com",
                            Firstname = "Fernando",
                            Lastname = "Gutierrez",
                            Profession = "Senior Software Architect",
                            Version = 0u
                        },
                        new
                        {
                            TeacherId = new Guid("08cd0782-93ba-4de3-b363-e7a4df2bfe7b"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 3, 2, 3, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1127789231",
                            Email = "ana.suarez@outlook.com",
                            Firstname = "Ana Camila",
                            Lastname = "Suarez",
                            Profession = "QA Automation",
                            Version = 0u
                        },
                        new
                        {
                            TeacherId = new Guid("42318f73-c7fd-4490-9594-7c72a77bbee7"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 4, 3, 4, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1643398122",
                            Email = "maria_natalia.garcia@outlook.com",
                            Firstname = "Maria Natalia",
                            Lastname = "Garcia",
                            Profession = "Scrum Master",
                            Version = 0u
                        },
                        new
                        {
                            TeacherId = new Guid("c774f591-750a-47f9-b283-327cdb62f627"),
                            Created = new DateTimeOffset(new DateTime(2024, 2, 5, 4, 5, 5, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DocumentNumber = "1992233120",
                            Email = "carlos.herrera@gmail.com",
                            Firstname = "Carlos Francisco",
                            Lastname = "Herrera",
                            Profession = "Senior Frontend Developer",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.Details.StudentDetailEntity", b =>
                {
                    b.HasOne("StudentCredits.Domain.Entities.StudentEntity", "Student")
                        .WithMany("Details")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentCredits.Domain.Entities.Details.TeacherDetailEntity", "TeacherDetail")
                        .WithMany()
                        .HasForeignKey("TeacherDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TeacherDetail");
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.Details.TeacherDetailEntity", b =>
                {
                    b.HasOne("StudentCredits.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentCredits.Domain.Entities.TeacherEntity", "Teacher")
                        .WithMany("Details")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.StudentEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("StudentCredits.Domain.Entities.TeacherEntity", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
